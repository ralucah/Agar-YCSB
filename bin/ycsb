#!/usr/bin/env python
#
# Copyright (c) 2012 - 2015 YCSB contributors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License. You
# may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License. See accompanying
# LICENSE file.
#

import errno
import fnmatch
import io
import os
import shlex
import sys
import subprocess
try:
    import argparse
except ImportError:
    print >> sys.stderr, '[ERROR] argparse not found. Try installing it via "pip".'
    raise

BASE_URL = "https://github.com/brianfrankcooper/YCSB/tree/master/"
COMMANDS = {
    # i dont need this!
    #"shell" : {
    #    "command"     : "",
    #    "description" : "Interactive mode",
    #    "main"        : "com.yahoo.ycsb.CommandLine",
    #},
    "load" : {
        "command"     : "-load",
        "description" : "Execute the load phase",
        "main"        : "com.yahoo.ycsb.Client",
    },
    "run" : {
        "command"     : "-t",
        "description" : "Execute the transaction phase",
        "main"        : "com.yahoo.ycsb.Client",
    },
    "proxy" : {
        "command"     : "proxy",
        "description" : "Start the Cache Proxy",
        "main"        : "com.yahoo.ycsb.proxy.UDPServer"
    },
}

CLIENTS = {
    "backend" : "com.yahoo.ycsb.dual.clients.BackendClient",
    "localcache" : "com.yahoo.ycsb.dual.clients.LocalCacheClient",
    "fixcache" : "com.yahoo.ycsb.dual.clients.FixCacheClient",
    "eccache" : "com.yahoo.ycsb.dual.clients.ECCacheClient",
    "dynamic" : "com.yahoo.ycsb.dual.clients.DynamicCacheClient",
    "dummy" : "com.yahoo.ycsb.dual.clients.DummyClient"
}

BINDING = "dual"

OPTIONS = {
    "-P file"        : "Specify workload file",
    "-p key=value"   : "Override workload property",
    "-s"             : "Print status to stderr",
    "-target n"      : "Target ops/sec (default: unthrottled)",
    "-threads n"     : "Number of client threads (default: 1)",
    "-cp path"       : "Additional Java classpath entries",
    "-jvm-args args" : "Additional arguments to the JVM",
}

def usage():
    output = io.BytesIO()
    print >> output, "%s command client [options]" % sys.argv[0]

    print >> output, "\nCommands:"
    for command in sorted(COMMANDS.keys()):
        print >> output, "    %s %s" % (command.ljust(14),
                                        COMMANDS[command]["description"])

    print >> output, "\nOptions:"
    for option in sorted(OPTIONS.keys()):
        print >> output, "    %s %s" % (option.ljust(14), OPTIONS[option])

    print >> output, """\nWorkload Files:
    There are various predefined workloads under workloads/ directory.
    See https://github.com/brianfrankcooper/YCSB/wiki/Core-Properties
    for the list of workload properties."""

    return output.getvalue()

def check_output(cmd):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    stdout, _ = p.communicate()
    if p.returncode:
        raise subprocess.CalledProcessError(p.returncode, cmd)
    return stdout

def debug(message):
    print >> sys.stderr, "[DEBUG] ", message

def warn(message):
    print >> sys.stderr, "[WARN] ", message

def error(message):
    print >> sys.stderr, "[ERROR] ", message

def find_jars(dir, glob='*.jar'):
    jars = []
    for (dirpath, dirnames, filenames) in os.walk(dir):
        for filename in fnmatch.filter(filenames, glob):
            jars.append(os.path.join(dirpath, filename))
    return jars

def get_ycsb_home():
    #dir = os.path.abspath(os.path.dirname(sys.argv[0]))
    #print("dir: " + dir)
    #print(os.path.abspath(dir))
    #return os.path.abspath(dir)
    return os.getcwd()

def is_distribution():
    # If there's a top level pom, we're a source checkout. otherwise a dist artifact
    return "pom.xml" not in os.listdir(get_ycsb_home())

# Run the maven dependency plugin to get the local jar paths.
# presumes maven can run, so should only be run on source checkouts
# will invoke the 'package' goal for the given BINDING in order to resolve intra-project deps
# presumes maven properly handles system-specific path separators
# Given module is full module name eg. 'core' or 'couchbase-BINDING'
def get_classpath_from_maven(module):
    #print("get_classpath_from_module: " + module)
    try:
        #debug("Running 'mvn -pl com.yahoo.ycsb:" + module + " -am package -DskipTests "
        #      "dependency:build-classpath -DincludeScope=compile -Dmdep.outputFilterFile=true'")
        mvn_output = check_output(["mvn", "-pl", "com.yahoo.ycsb:" + module,
                                   "-am", "package", "-DskipTests",
                                   "dependency:build-classpath",
                                   "-DincludeScope=compile",
                                   "-Dmdep.outputFilterFile=true"])
        # the above outputs a "classpath=/path/tojar:/path/to/other/jar" for each module
        # the last module will be the datastore BINDING
        line = [x for x in mvn_output.splitlines() if x.startswith("classpath=")][-1:]
        return line[0][len("classpath="):]
    except subprocess.CalledProcessError, err:
        error("Attempting to generate a classpath from Maven failed "
              "with return code '" + str(err.returncode) + "'. The output from "
              "Maven follows, try running "
              "'mvn -DskipTests package dependency:build=classpath' on your "
              "own and correct errors." + os.linesep + os.linesep + "mvn output:" + os.linesep)
              #+ err.output)
        sys.exit(err.returncode)

def main():
    # parse cmd line args
    p = argparse.ArgumentParser(
            usage=usage(),
            formatter_class=argparse.RawDescriptionHelpFormatter)
    p.add_argument('-cp', dest='classpath', help="""Additional classpath
                   entries will be prepended to the YCSB classpath.""")
    p.add_argument("-jvm-args", default=['-XX:-HeapDumpOnOutOfMemoryError'], type=shlex.split,
                   help="""Additional arguments to pass to 'java', e.g. '-Xmx4g'""")
    p.add_argument("command", choices=sorted(COMMANDS),
                   help="""Command to run.""")
    p.add_argument("client",nargs="?",choices=sorted(CLIENTS),help="""Client to test.""")

    # get home dir
    ycsb_home = get_ycsb_home()
    #print("ycsb_home: " + ycsb_home)

    # java setup
    java = "java"
    java_home = os.getenv("JAVA_HOME")
    if java_home:
        java = os.path.join(java_home, "bin", "java")
    #print("java: " + java)

    # get args
    args, remaining = p.parse_known_args()
    command = COMMANDS[args.command]["command"]
    main_classname = COMMANDS[args.command]["main"]
    
    #print("command: " + command)
    #print("main_classname: " + main_classname)

    if command == "proxy":
        client_location = "proxy"
        project = "proxy"
        client_dir = os.path.join(ycsb_home, client_location)
    else:
        client_location = BINDING
        project = BINDING + "-binding"
        client_dir = os.path.join(ycsb_home, client_location)

    #print("client_location: " + client_location)
    #print("project: " + project)
    #print("client_dir: " + client_dir)

    # goes first so we can rely on side-effect of package
    maven_says = get_classpath_from_maven(project)
    #print("maven_says: " + maven_says)

    # classpath
    cp = find_jars(os.path.join(client_dir, "target"), project + "*.jar")
    cp.append(maven_says)
    cp.insert(0, os.path.join(client_dir, "conf"))
    classpath = os.pathsep.join(cp)
    if args.classpath:
        classpath = os.pathsep.join([args.classpath, classpath])

    if command == "proxy":
        ycsb_command = ([java] + args.jvm_args +
                    ["-cp", classpath,
                     main_classname] + remaining)
    else:
        client_classname = CLIENTS[args.client]
        ycsb_command = ([java] + args.jvm_args +
                    ["-cp", classpath,
                     main_classname, "-client", client_classname] + remaining)
    #print(ycsb_command)

    ycsb_command.append(command)

    try:
        return subprocess.call(ycsb_command)
    except OSError as e:
        if e.errno == errno.ENOENT:
            error('Command failed. Is java installed and on your PATH?')
            return 1
        else:
            raise

if __name__ == '__main__':
    sys.exit(main())
